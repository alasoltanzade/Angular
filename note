Pull	Passive: produces data when requested.	Active: decides when data is requested.
مصرف کننده تعیین می کند که چه زمانی داده ها را از تولید کننده داده دریافت می کند. خود تولیدکننده از زمان تحویل داده ها به مصرف کننده بی اطلاع است.

Push	Active: produces data at its own pace.	Passive: reacts to received data.
تولیدکننده تعیین می‌کند که چه زمانی داده‌ها را برای مصرف‌کننده ارسال کند. مصرف کننده از زمان دریافت آن داده ها بی اطلاع است.


subscriber.next(42); = return 42;
*Subscribing to an Observable is analogous to calling a Function.

*Observables are able to deliver values either synchronously or asynchronously.

*Observables can "return" multiple values over time
Function            return 42;
                    return 100; // dead code. will never happen
وقتی تابعی را فراخوانی می‌کنید، یک مقدار (مثل عدد) را به صورت همزمان (synchronously) برمی‌گرداند.



Observables         subscriber.next(42);
                    subscriber.next(100); // "return" another value
                    subscriber.next(200); // "return" yet another
 وقتی به یک Observable (subscribe) می‌شوید، می‌تواند هر تعداد مقداری (به صورت همزمان یا غیرهمزمان) برگرداند.


(subscribe): مشابه فراخوانی یک تابع است، با این تفاوت که به جای بازگرداندن یک مقدار ثابت، می‌توانید هر تعداد مقدار را در طول زمان دریافت کنید.



func.call() means "give me one value synchronously"
observable.subscribe() means "give me any amount of values, either synchronously or asynchronously"


*Anatomy of an Observable
Creating Observables
Subscribing to Observables
Executing the Observable
Disposing Observables

import { Observable } from 'rxjs';
const observable = new Observable(function subscribe(subscriber) {
  const id = setInterval(() => {
    subscriber.next('hi');
  }, 1000);
});


observable.subscribe((x) => console.log(x));


*Subscribing to an Observable is like calling a function, providing callbacks where the data will be delivered to.

"Next" notification: sends a value such as a Number, a String, an Object, etc.
"Error" notification: sends a JavaScript Error or exception.
"Complete" notification: does not send a value.

*In an Observable Execution, zero to infinite Next notifications may be delivered. If either an Error or Complete notification is delivered, then nothing else can be delivered afterwards.


const subscription = observable.subscribe((x) => console.log(x));
*When you subscribe, you get back a Subscription, which represents the ongoing execution. Just call unsubscribe() to cancel the execution.

*An Observer is a consumer of values delivered by an Observable. Observers are simply a set of callbacks, one for each type of notification delivered by the Observable: next, error, and complete.

____________________________________________________________________________________

Operators are functions
*Pipeable Operators are the kind that can be piped to Observables using the syntax observableInstance.pipe(operator)
    A Pipeable Operator is a function that takes an Observable as its input and returns another Observable. It is a pure operation: the previous Observable stays unmodified.
    A Pipeable Operator Factory is a function that can take parameters to set the context and return a Pipeable Operator. The factory’s arguments belong to the operator’s lexical scope.

اپراتورها توابعی هستند که بر روی ابزرور ها اعمال می‌شوند و رفتار آنها را تغییر می‌دهند.


*pipe = Pipeable operators are functions, so they could be used like ordinary functions
*interval = creation operators are functions that can be used to create an Observable with some common predefined behavior

*Higher-order Observables
      concatAll    ـ Converts a higher-order Observable into a first-order Observable by concatenating the inner Observables in order.
      mergeAll     — subscribes to each inner Observable as it arrives, then emits each value as it arrives
      switchAll    — subscribes to the first inner Observable when it arrives, and emits each value as it arrives, but when the next inner Observable arrives, unsubscribes to the previous one, and subscribes to the new one.
      exhaustAll   — subscribes to the first inner Observable when it arrives, and emits each value as it arrives, discarding all newly arriving inner Observables until that first one completes, then waits for the next inner Observable.


*Use the pipe() function to make new operators
If there is a commonly used sequence of operators in your code, use the pipe() function to extract the sequence into a new operator. Even if a sequence is not that common, breaking it out into a single operator can improve readability.



ــــــــــــ
import { Observable, of } from 'rxjs';

function delay<T>(delayInMillis: number) {
  return (observable: Observable<T>) =>
    new Observable<T>((subscriber) => {
      // this function will be called each time this
      // Observable is subscribed to.
      const allTimerIDs = new Set();
      let hasCompleted = false;
      const subscription = observable.subscribe({
        next(value) {
          // Start a timer to delay the next value
          // from being pushed.
          const timerID = setTimeout(() => {
            subscriber.next(value);
            // after we push the value, we need to clean up the timer timerID
            allTimerIDs.delete(timerID);
            // If the source has completed, and there are no more timers running,
            // we can complete the resulting observable.
            if (hasCompleted && allTimerIDs.size === 0) {
              subscriber.complete();
            }
          }, delayInMillis);

          allTimerIDs.add(timerID);
        },
        error(err) {
          // We need to make sure we're propagating our errors through.
          subscriber.error(err);
        },
        complete() {
          hasCompleted = true;
          // If we still have timers running, we don't want to complete yet.
          if (allTimerIDs.size === 0) {
            subscriber.complete();
          }
        },
      });

      // Return the finalization logic. This will be invoked when
      // the result errors, completes, or is unsubscribed.
      return () => {
        subscription.unsubscribe();
        // Clean up our timers.
        for (const timerID of allTimerIDs) {
          clearTimeout(timerID);
        }
      };
    });
}

// Try it out!
of(1, 2, 3).pipe(delay(1000)).subscribe(console.log);

ــــــــــــــــــــــــــــــــ

*Subscription = A Subscription is an object that represents a disposable resource, usually the execution of an Observable. A Subscription has one important method, unsubscribe, that takes no argument and just disposes the resource held by the subscription.
*A Subscription essentially just has an unsubscribe() function to release resources or cancel Observable executions.

*A Subject is like an Observable, but can multicast to many Observers. Subjects are like EventEmitters: they maintain a registry of many listeners.
*Every Subject is an Observable *you can subscribe to it
Internally to the Subject, subscribe does not invoke a new execution that delivers values


Subject: مشابه Observable است اما می‌تواند به چندین مشاهده‌گر داده ارسال کند. مانند EventEmitter در جاوا اسکریپت است که یک لیست از شنوندگان (listeners) دارد.



import { Subject, from } from 'rxjs';
 
const subject = new Subject<number>();
 
subject.subscribe({
  next: (v) => console.log(`observerA: ${v}`),
});
subject.subscribe({
  next: (v) => console.log(`observerB: ${v}`),
});
 
const observable = from([1, 2, 3]);
 
observable.subscribe(subject); // You can subscribe providing a Subject
 
*There are also a few specializations of the Subject type: BehaviorSubject, ReplaySubject, and AsyncSubject.

*A multicasted Observable uses a Subject under the hood to make multiple Observers see the same Observable execution.

*refCount makes the multicasted Observable automatically start executing when the first subscriber arrives, and stop executing when the last subscriber leaves.

*BehaviorSubjects are useful for representing "values over time". For instance, an event stream of birthdays is a Subject, but the stream of a person's age would be a BehaviorSubject.

*A ReplaySubject records multiple values from the Observable execution and replays them to new subscribers.

